//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "ckx_server.h"

Define_Module(Ckx_server);
void Ckx_server::initialize(int stage)
{
    cSimpleModule::initialize(stage);
    if (stage!=inet::INITSTAGE_APPLICATION_LAYER) return;
    total_car_number = par("server_eta_threshold").intValue();
    count = 10000;
    period_ = par("period").doubleValue();
    AoI_data.resize(total_car_number);

//    weight_probility[20] = {0.045000000000000005, 0.045000000000000005, 0.045, 0.045000000000000005, 0.045000000000000005, 0.07664530778588129, 0.045000000000000005, 0.045, 0.045000000000000005, 0.045000000000000005, 0.045000000000000005, 0.045, 0.05419641688152675, 0.05419641688152675, 0.05419641688152675, 0.07664530778588129, 0.045000000000000005, 0.045, 0.045, 0.05419641688152675};
    weight_probility[20] = {};
    success_probility[20] = {0.3, 0.6, 0.5, 0.4, 0.6, 0.1, 0.4, 0.5, 0.8, 0.8, 0.4, 0.5, 0.2, 0.2, 0.2, 0.1, 0.4, 0.5, 0.5, 0.2};
//    weight_probility[50] = {0.018000000000000002, 0.019745889249196267, 0.018000000000000002, 0.018000000000000002, 0.03420088342023601, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.03420088342023601, 0.019745889249196267, 0.018000000000000002, 0.018000000000000002, 0.024183676589019446, 0.018000000000000002, 0.018000000000000002, 0.024183676589019446, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.019745889249196267, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.019745889249196267, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.024183676589019446, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.024183676589019446, 0.018000000000000002, 0.019745889249196267, 0.018000000000000002, 0.03420088342023601, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.018000000000000002, 0.03420088342023601, 0.019745889249196267, 0.018000000000000002, 0.018000000000000002};
    weight_probility[50] = {};
    success_probility[50] = {0.8, 0.3, 0.5, 0.8, 0.1, 0.4, 0.8, 0.8, 0.1, 0.3, 0.7, 0.6, 0.2, 0.8, 0.8, 0.2, 0.7, 0.5, 0.8, 0.5, 0.3, 0.9, 0.9, 0.4, 0.3, 0.6, 0.4, 0.7, 0.9, 0.2, 0.7, 0.7, 0.4, 0.7, 0.2, 0.6, 0.3, 0.6, 0.1, 0.6, 0.8, 0.4, 0.6, 0.9, 0.6, 0.7, 0.1, 0.3, 0.4, 0.4};
//    weight_probility[80] = {0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.014325428647913412, 0.011250000000000001, 0.014325428647913412, 0.011696663511345398, 0.01125, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.011696663511345398, 0.011250000000000001, 0.01125, 0.011250000000000001, 0.020259215480687216, 0.011250000000000001, 0.014325428647913412, 0.014325428647913412, 0.011250000000000001, 0.020259215480687216, 0.011250000000000001, 0.011696663511345398, 0.011250000000000001, 0.011250000000000001, 0.01125, 0.011250000000000001, 0.020259215480687216, 0.011696663511345398, 0.01125, 0.011250000000000001, 0.01125, 0.01125, 0.01125, 0.011250000000000001, 0.014325428647913412, 0.014325428647913412, 0.01125, 0.014325428647913412, 0.011250000000000001, 0.011250000000000001, 0.011696663511345398, 0.01125, 0.011250000000000001, 0.011250000000000001, 0.020259215480687216, 0.011250000000000001, 0.020259215480687216, 0.011250000000000001, 0.014325428647913412, 0.01125, 0.011696663511345398, 0.01125, 0.01125, 0.014325428647913412, 0.011250000000000001, 0.011250000000000001, 0.011250000000000001, 0.01125, 0.011250000000000001, 0.01125, 0.01125, 0.011250000000000001, 0.01125, 0.011250000000000001, 0.011250000000000001, 0.011696663511345398, 0.011250000000000001, 0.014325428647913412, 0.01125, 0.020259215480687216, 0.01125, 0.014325428647913412, 0.020259215480687216};
    weight_probility[80] ={};
    success_probility[80] = {0.4, 0.8, 0.4, 0.7, 0.6, 0.8, 0.4, 0.8, 0.2, 0.6, 0.2, 0.3, 0.5, 0.7, 0.8, 0.8, 0.7, 0.3, 0.4, 0.9, 0.8, 0.1, 0.8, 0.2, 0.2, 0.6, 0.1, 0.8, 0.3, 0.4, 0.8, 0.5, 0.4, 0.1, 0.3, 0.9, 0.4, 0.9, 0.9, 0.5, 0.6, 0.2, 0.2, 0.5, 0.2, 0.7, 0.4, 0.3, 0.9, 0.8, 0.6, 0.1, 0.6, 0.1, 0.4, 0.2, 0.5, 0.3, 0.9, 0.5, 0.2, 0.7, 0.8, 0.8, 0.5, 0.7, 0.9, 0.9, 0.7, 0.5, 0.7, 0.6, 0.3, 0.4, 0.2, 0.9, 0.1, 0.9, 0.2, 0.1};
//    weight_probility[110] = {0.008181818181818182, 0.014342654069106715, 0.014342654069106715, 0.008181818181818182, 0.008181818181818182, 0.014342654069106715, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818184, 0.014342654069106715, 0.008181818181818182, 0.008280735187692446, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.014342654069106715, 0.010141787952478188, 0.008181818181818182, 0.010141787952478188, 0.008181818181818184, 0.008280735187692446, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.010141787952478188, 0.014342654069106715, 0.008181818181818182, 0.010141787952478188, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.014342654069106715, 0.008181818181818182, 0.008181818181818182, 0.010141787952478188, 0.008181818181818182, 0.014342654069106715, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818184, 0.008181818181818182, 0.010141787952478188, 0.008181818181818184, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.010141787952478188, 0.008181818181818182, 0.008181818181818184, 0.014342654069106715, 0.008181818181818184, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008280735187692446, 0.008280735187692446, 0.008181818181818184, 0.010141787952478188, 0.008181818181818184, 0.008181818181818182, 0.008280735187692446, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008280735187692446, 0.008181818181818182, 0.010141787952478188, 0.008181818181818184, 0.008181818181818182, 0.010141787952478188, 0.008181818181818182, 0.010141787952478188, 0.008181818181818182, 0.010141787952478188, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818184, 0.008181818181818184, 0.008181818181818182, 0.008181818181818184, 0.010141787952478188, 0.008181818181818182, 0.014342654069106715, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818184, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.014342654069106715, 0.014342654069106715, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818184, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182, 0.008181818181818182};
    weight_probility[110] = {};
    success_probility[110] = {0.8, 0.1, 0.1, 0.8, 0.5, 0.1, 0.4, 0.9, 0.4, 0.7, 0.6, 0.1, 0.4, 0.3, 0.5, 0.9, 0.4, 0.1, 0.2, 0.8, 0.2, 0.6, 0.3, 0.4, 0.8, 0.9, 0.5, 0.2, 0.1, 0.9, 0.2, 0.9, 0.8, 0.4, 0.9, 0.4, 0.1, 0.4, 0.4, 0.2, 0.9, 0.1, 0.9, 0.5, 0.5, 0.9, 0.6, 0.7, 0.2, 0.6, 0.5, 0.5, 0.9, 0.2, 0.7, 0.6, 0.1, 0.6, 0.8, 0.4, 0.8, 0.3, 0.3, 0.6, 0.2, 0.6, 0.4, 0.3, 0.4, 0.9, 0.5, 0.3, 0.7, 0.2, 0.6, 0.9, 0.2, 0.8, 0.2, 0.9, 0.2, 0.5, 0.5, 0.8, 0.7, 0.5, 0.6, 0.6, 0.5, 0.6, 0.2, 0.4, 0.1, 0.4, 0.5, 0.9, 0.6, 0.4, 0.9, 0.7, 0.1, 0.1, 0.9, 0.4, 0.4, 0.6, 0.5, 0.4, 0.8, 0.4};
//    weight_probility[140] = {0.007901087744658, 0.006451211129123214, 0.011173825445995192, 0.006428571428571429, 0.006428571428571429, 0.006451211129123214, 0.007901087744658, 0.006428571428571429, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.007901087744658, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.006428571428571429, 0.0064285714285714285, 0.0064285714285714285, 0.006428571428571429, 0.007901087744658, 0.0064285714285714285, 0.006428571428571429, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.007901087744658, 0.006428571428571429, 0.007901087744658, 0.006451211129123214, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.011173825445995192, 0.006428571428571429, 0.006428571428571429, 0.011173825445995192, 0.011173825445995192, 0.006428571428571429, 0.006428571428571429, 0.011173825445995192, 0.011173825445995192, 0.007901087744658, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.007901087744658, 0.006451211129123214, 0.006428571428571429, 0.007901087744658, 0.006428571428571429, 0.006428571428571429, 0.007901087744658, 0.007901087744658, 0.006428571428571429, 0.006451211129123214, 0.0064285714285714285, 0.0064285714285714285, 0.006428571428571429, 0.006451211129123214, 0.0064285714285714285, 0.011173825445995192, 0.0064285714285714285, 0.006428571428571429, 0.007901087744658, 0.007901087744658, 0.0064285714285714285, 0.006428571428571429, 0.007901087744658, 0.006451211129123214, 0.006428571428571429, 0.0064285714285714285, 0.006428571428571429, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.011173825445995192, 0.006451211129123214, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.007901087744658, 0.0064285714285714285, 0.0064285714285714285, 0.006428571428571429, 0.0064285714285714285, 0.006451211129123214, 0.011173825445995192, 0.006428571428571429, 0.006428571428571429, 0.006451211129123214, 0.006451211129123214, 0.011173825445995192, 0.006451211129123214, 0.011173825445995192, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.006428571428571429, 0.0064285714285714285, 0.006451211129123214, 0.0064285714285714285, 0.0064285714285714285, 0.011173825445995192, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.0064285714285714285, 0.011173825445995192, 0.0064285714285714285, 0.006451211129123214, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.011173825445995192, 0.006428571428571429, 0.011173825445995192, 0.011173825445995192, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.007901087744658, 0.006451211129123214, 0.006451211129123214, 0.006428571428571429, 0.006451211129123214, 0.0064285714285714285, 0.006428571428571429, 0.006428571428571429, 0.006428571428571429, 0.0064285714285714285, 0.006428571428571429, 0.006428571428571429, 0.006451211129123214};
    weight_probility[140] = {};
    success_probility[140] = {0.2, 0.3, 0.1, 0.6, 0.6, 0.3, 0.2, 0.8, 0.3, 0.6, 0.8, 0.2, 0.9, 0.6, 0.7, 0.9, 0.5, 0.5, 0.9, 0.2, 0.7, 0.9, 0.3, 0.9, 0.6, 0.9, 0.7, 0.2, 0.9, 0.2, 0.3, 0.3, 0.9, 0.6, 0.7, 0.1, 0.6, 0.6, 0.1, 0.1, 0.9, 0.6, 0.1, 0.1, 0.2, 0.4, 0.6, 0.6, 0.2, 0.3, 0.4, 0.2, 0.6, 0.4, 0.2, 0.2, 0.4, 0.3, 0.7, 0.7, 0.6, 0.3, 0.5, 0.1, 0.5, 0.9, 0.2, 0.2, 0.7, 0.4, 0.2, 0.3, 0.6, 0.5, 0.9, 0.3, 0.8, 0.8, 0.1, 0.3, 0.3, 0.4, 0.4, 0.6, 0.2, 0.7, 0.5, 0.9, 0.7, 0.3, 0.1, 0.6, 0.9, 0.3, 0.3, 0.1, 0.3, 0.1, 0.8, 0.9, 0.7, 0.9, 0.7, 0.3, 0.5, 0.7, 0.1, 0.3, 0.8, 0.8, 0.8, 0.9, 0.5, 0.5, 0.1, 0.7, 0.3, 0.4, 0.4, 0.4, 0.1, 0.6, 0.1, 0.1, 0.9, 0.4, 0.7, 0.2, 0.3, 0.3, 0.9, 0.3, 0.5, 0.4, 0.6, 0.6, 0.5, 0.4, 0.9, 0.3};
//    weight_probility[170] = {0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.00914632823875507, 0.005294117647058823, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.006467430720581722, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.00914632823875507, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.00914632823875507, 0.00914632823875507, 0.005294117647058823, 0.005294117647058824, 0.006467430720581722, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.006467430720581722, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058823, 0.006467430720581722, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058823, 0.006467430720581722, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058823, 0.00914632823875507, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.006467430720581722, 0.00914632823875507, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824, 0.005294117647058824};
    weight_probility[170] = {};
    success_probility[170] = {0.6, 0.9, 0.3, 0.9, 0.3, 0.1, 0.1, 0.5, 0.5, 0.9, 0.7, 0.3, 0.8, 0.8, 0.8, 0.8, 0.4, 0.4, 0.8, 0.6, 0.1, 0.3, 0.8, 0.9, 0.6, 0.3, 0.1, 0.7, 0.4, 0.7, 0.2, 0.2, 0.5, 0.3, 0.7, 0.3, 0.7, 0.2, 0.7, 0.3, 0.7, 0.8, 0.5, 0.9, 0.4, 0.2, 0.3, 0.1, 0.7, 0.8, 0.1, 0.1, 0.1, 0.3, 0.6, 0.8, 0.6, 0.2, 0.5, 0.7, 0.6, 0.1, 0.9, 0.5, 0.6, 0.9, 0.8, 0.8, 0.3, 0.6, 0.1, 0.1, 0.1, 0.5, 0.6, 0.2, 0.1, 0.6, 0.6, 0.3, 0.7, 0.1, 0.8, 0.9, 0.1, 0.9, 0.6, 0.7, 0.4, 0.6, 0.9, 0.1, 0.2, 0.6, 0.4, 0.3, 0.8, 0.5, 0.4, 0.1, 0.9, 0.5, 0.2, 0.6, 0.3, 0.8, 0.5, 0.4, 0.3, 0.5, 0.9, 0.8, 0.2, 0.7, 0.8, 0.6, 0.8, 0.5, 0.5, 0.2, 0.3, 0.5, 0.9, 0.7, 0.6, 0.9, 0.6, 0.5, 0.8, 0.7, 0.6, 0.9, 0.5, 0.4, 0.4, 0.2, 0.4, 0.3, 0.9, 0.4, 0.8, 0.4, 0.8, 0.8, 0.3, 0.8, 0.1, 0.4, 0.4, 0.8, 0.2, 0.1, 0.4, 0.6, 0.9, 0.9, 0.4, 0.5, 0.1, 0.1, 0.6, 0.8, 0.2, 0.1, 0.9, 0.9, 0.8, 0.6, 0.3, 0.9};
    /*
     * index: AOI
     * 0    : 1...
     * 1    : 1...
     * ...
     * 19   : 1...
     * */
    for(int i = 0; i < total_car_number; i++) {
        double success_probility1 = success_probility[total_car_number][i];
        int aoi = 1;
        double weight_probility1 = (success_probility1 / 2) * aoi * (aoi + 2);
        weight_probility[total_car_number].push_back(weight_probility1);
    }


    for(int i = 0; i < total_car_number; ++i){
        AoI_data[i].push_back(1);
    }

    selfMsg = new cMessage("selfMsg");
    scheduleAt(simTime() + 0.1, selfMsg);
}

void Ckx_server::handleMessage(cMessage *msg)
{
    if(msg->isSelfMessage()){
        if(!(strcmp(msg->getName(), "selfMsg"))){
            if(allNodeIndex.size() < total_car_number){
                scheduleAt(simTime() + 0.1, selfMsg);
            }else{
                cancelAndDelete(selfMsg);
                triggerMsg = new cMessage("trigger");
                scheduleAt(simTime() + period_, selfMsg);
            }
        }else{
            if(count < 1){
                cancelAndDelete(triggerMsg);
                return;
            }
            --count;

            int node_index = select_node_upload1();

            for(int i = 0; i < AoI_data.size(); ++i){
                int tmp = AoI_data[i].back();
                AoI_data[i].push_back(tmp + 1);
            }

            if(node_index == -1){
                for(int i = 0; i < AoI_data.size(); ++i){
                    AoI_data[i].push_back(AoI_data[i].back() + 1);
                }
            }

            DL* packet = new DL("notify_node");
            packet->setSuccess_probility(success_probility[total_car_number][node_index]);
            cModule *pp_sub = getParentModule()->getParentModule()->getSubmodule("car", node_index);
            if(pp_sub != nullptr){
                sendDirect(packet, pp_sub->getSubmodule("app", 0)->gate("hostIn"));
            }else{
                printf("pp_sub is null pointer! \n");
            }
            scheduleAt(simTime() + period_, selfMsg);
        }
    }else{
        AoId* mmsg = check_and_cast<AoId*>(msg);
        update_AoI(mmsg->getWhich());
        update_weight_probility();
        delete mmsg;
    }
}
int Ckx_server::select_node_upload(){
    std::random_device rd;  // Will be used to obtain a seed for the random number engine
    std::mt19937 generator(rd());
    std::uniform_real_distribution<double> distribution_probility(0, 1);
    double now_probility = distribution_probility(generator);
    double tmp = 0.;
    int index_n = 0;
    for(auto ch : weight_probility[total_car_number]){
        tmp += ch;
        if(now_probility < tmp){
            return index_n;
        }
        ++index_n;
    }
    return -1;
}

int Ckx_server::select_node_upload1(){
    int maxPosition = 0;
    for(int i = 0; i < weight_probility[total_car_number].size(); i++) {
        if(weight_probility[total_car_number][maxPosition] < weight_probility[total_car_number][i]) {
            maxPosition = i;
        }
    }
    return maxPosition;
}


void Ckx_server::update_AoI(int node_index){
    AoI_data[node_index].back() = 1;
//    for(int i = 0; i < AoI_data.size(); ++i){
//        if(i == node_index){
//            AoI_data[i].push_back(1);
//        }else{
//            int tmp = AoI_data[i].back();
//            AoI_data[i].push_back(tmp + 1);
//        }
//    }
}

void Ckx_server::update_weight_probility() {
    weight_probility[total_car_number].clear();
    for(int i = 0; i < total_car_number; i++) {
        double success_probility1 = success_probility[total_car_number][i];
        double aoi = AoI_data[i].back();;
        double weight_probility1 = (success_probility1 / 2) * aoi * (aoi + 2);
        weight_probility[total_car_number].push_back(weight_probility1);
    }
}

